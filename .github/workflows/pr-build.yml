name: Build

on:
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
       - name: Check user permission
         id: check
         uses: scherermichael-oss/action-has-permission@master
         with:
           required-permission: write
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                
       - name: Set up Go 1.x
         if: steps.check.outputs.has-permission
         uses: actions/setup-go@v2
         with:
           go-version: ^1.13
         id: go

       - name: Check out code into the Go module directory
         if: steps.check.outputs.has-permission
         uses: actions/checkout@v2
         with:
          ref: ${{ github.head_ref }}

       - name: Get short commit hash
         if: steps.check.outputs.has-permission
         id: hash
         run: echo "::set-output name=sha7::$(echo $(git rev-parse --short HEAD) | cut -c1-7)"

       - name: Show short hash
         if: steps.check.outputs.has-permission
         run: |
           echo ${{ steps.hash.outputs.sha7 }}

       - name: Get dependencies
         if: steps.check.outputs.has-permission
         run: |
           go get -v -t -d ./...

       - name: Swagger
         if: steps.check.outputs.has-permission
         run: make swag

       - name: Build
         if: steps.check.outputs.has-permission
         run: make go-build

       - name: Login to DockerHub Registry
         if: steps.check.outputs.has-permission
         run: echo ${{ secrets.REGISTRY_PASSWORD }} | docker login -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin

       - name: Docker Build & Push Release Images
         if: steps.check.outputs.has-permission
         env:
           API_IMAGE: ${{ secrets.REGISTRY }}:api-${{ steps.hash.outputs.sha7 }}
           WORKER_IMAGE: ${{ secrets.REGISTRY }}:worker-${{ steps.hash.outputs.sha7 }}
         run: |
           docker build --build-arg SERVICE=api/api -f Dockerfile.runner -t $API_IMAGE .
           docker build --build-arg SERVICE=worker/worker -f Dockerfile.runner -t $WORKER_IMAGE .
           docker push $API_IMAGE
           docker push $WORKER_IMAGE